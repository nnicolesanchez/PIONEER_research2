import matplotlib.pyplot as plt
import numpy as np
import pynbody

@pynbody.derived_array
#def rhoOVI(f):
#    ovi = pynbody.analysis.ionfrac.calculate(f,ion='ovi',mode='new')
#    return f.gas['rho']*ovi*f.gas['OxMassFrac']  # Original from Pontzen

def N_OVI(f):
    ovi = pynbody.analysis.ionfrac.calculate(f,ion='ovi',mode='new')
    m_p = 1.6726 * 10**-24 #g
    #print(ovi)
    #print(f.gas['OxMassFrac'])
    print(f.gas['rho'].in_units('g cm**-3')*ovi*f.gas['OxMassFrac']/(16*m_p))
    return f.gas['rho'].in_units('g cm**-3')*ovi*f.gas['OxMassFrac']/(16*m_p)

    
k = 3
sim = ['/nobackupp8/fgoverna/pioneer50h243.1536g1bwK1BH/pioneer50h243.1536gst1bwK1BH.004096','/nobackupp8/fgoverna/pioneer50h243GM1.1536gs1bwK1BH/pioneer50h243GM1.1536gst1bwK1BH.004096','/nobackupp8/fgoverna/pioneer50h243GM4.1536gst1bwK1BH/pioneer50h243GM4.1536gst1bwK1BH.004096','/nobackup/nnsanche/pioneer50h243GM5.1536gst1bwK1BH/pioneer50h243GM5.1536gst1bwK1BH.004096','/nobackupp8/fgoverna/pioneer50h243GM6.1536gst1bwK1BH/pioneer50h243GM6.1536gst1bwK1BH.004096','/nobackup/nnsanche/pioneer50h243GM7.1536gst1bwK1BH/pioneer50h243GM7.1536gst1bwK1BH.004096']
labels = ['P0','GM1','GM4','GM5','GM6','GM7']

######################
# READ IN SIMULATION #
######################
f = pynbody.load(sim[k])
pynbody.analysis.halo.center(f.star)
f.physical_units()
h = f.halos()
h1 = h[1]
pynbody.analysis.angmom.faceon(h1)

###################
# ISOLATE CGM GAS #   
###################
# Isolate and remove disk stars within radius 0-10 kpc & vertically 10 kpc 
r_max = 10  # kpc
#z_max = 10 #4 # kpc

Rg_d = ((h1.g['x'].in_units('kpc'))**2. + (h1.g['y'].in_units('kpc'))**2. + (h1.g['z'].in_units('kpc'))**2.)**(0.5)
disk_gas_xyzmax =  (Rg_d < r_max)
#disk_gas_zmax  = (h1.g['z'].in_units('kpc') < z_max) & (h1.g['z'].in_units('kpc') > -z_max)
disk_gas_mask = disk_gas_xyzmax #& disk_gas_zmax
disk_gas = h1.g[disk_gas_mask] #& disk_gas_zmax]
CGM_gas  = h1.g[~disk_gas_mask]

#########################
# CALCULATE OVI DENSITY #
#########################
# Ionization fraction of OVI compare to total Oxygen
ovi = pynbody.analysis.ionfrac.calculate(CGM_gas,ion='ovi',mode='new') 
m_p = 1.6726 * 10**-24 #g

# OVI density = total CGM gas density * fraction of oxygen * fraction of OVI / mass of oxygen
OVI = CGM_gas['rho'].in_units('g cm**-3')*ovi*CGM_gas['OxMassFrac']/(16*m_p)
print('Total mass Oxygen in CGM:', np.sum(CGM_gas['OxMassFrac']*CGM_gas['mass']),CGM_gas['mass'].units)
print('Total mass in OVI in CGM:', np.sum(CGM_gas['OxMassFrac']*CGM_gas['mass']*ovi))
print('OVI Density: ',OVI,OVI.units)

#############################################################
# DIVIDE PARTICLES INTO SHELLS & CALCULATE COLUMN DENSITIES #
#############################################################
# In shells of 10 kpc, take an average density and line of sight L for each shell
shell_bounds = np.arange(0,240,10)
CGM_r = (CGM_gas['x']**2 + CGM_gas['y']**2)**(0.5)
R_vir = int(np.max(CGM_r))
print('R_vir',int(np.max(CGM_r)),CGM_gas['x'].units)

CGM_Novi = []
for i in range(len(shell_bounds)-1):
    shell = CGM_gas[(np.abs(CGM_r) > shell_bounds[i]) & (np.abs(CGM_r) < shell_bounds[i+1])]
    shell_ovi_frac = ovi[(np.abs(CGM_r) > shell_bounds[i]) & (np.abs(CGM_r) < shell_bounds[i+1])]
    shell_OVI_rho = shell['rho'].in_units('g cm**-3')*shell_ovi_frac*shell['OxMassFrac']/(16*m_p)
    avg_shell_OVI_rho = np.average(shell_OVI_rho)
    print(avg_shell_OVI_rho,shell_OVI_rho.units)

#    r = shell_bounds[i] + 5
#    average_L = (R_vir**2 - r**2)**0.5 #geometry!
#    print(average_L*2)
    shell_z = np.max(shell['z'].in_units('cm')) - np.min(shell['z'].in_units('cm'))
    print(shell_z)
    
    CGM_Novi.append(avg_shell_OVI_rho*shell_z) # Using shell_z to underestimate gas

print(CGM_Novi)

b_impact = shell_bounds + 5
print(b_impact)

plt.plot(shell_bounds[:-1],np.log10(CGM_Novi),marker='.')
plt.ylabel(r'N$_{OVI}$ [g cm$^{-2}$]')
plt.xlabel(r'$r$ [kpc]')
plt.ylim(12,17.5)
plt.xlim(-10,260)
plt.text(240,17.25,str(labels[k]))
#plt.legend()
plt.savefig(labels[k]+'_NOVI_b_new.pdf')
plt.show()


quit()
##########################################
# PLOT COLUMN DENSITY AS FUNCTION OF X,Y #
##########################################
# From Pontzen's code
pynbody.plot.sph.image(CGM_gas,qty='N_OVI',width='500 kpc',cmap='magma',show_cbar=False,units="g cm^-2",vmin=1e13,vmax=1e15)

plt.text(200,200,str(labels[i]),color='White')
plt.colorbar(label=r'N$_{OVI}$ cm$^{-2}$')
#plt.savefig(str(labels[i])+'_OVI.pdf')
plt.show()













