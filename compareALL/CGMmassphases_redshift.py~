# This script creates the arrays of data for the CGM mass 
# of different phases:
#        Cool: 10^4   - 10^4.5
#              10^4.5 - 10^5
#        Warm: 10^5   - 10^6
#        Hot:  10^6   - 10^7

#     - Outputs:
#         1. Numpy arrays for CGM Mass vs redshift/time for 
#            all sims (P0-GM7)
#         2. Also metal fractions for mean CGM vs z/t plots

# N. Nicole Sanchez -- August 2017
# Univ. of Wash.    -- Nbody Shop
import matplotlib.pyplot as plt
import matplotlib.cm as cm
import matplotlib as mpl
import numpy as np
import pynbody
import sys


if len(sys.argv) == 1:
    print('No temperature range selected. Current options: cool (10^4 - 10^4.5), cool/warm (10^4.5 - 10^5), warm (10^5-10^6), hot (10^6-10^7)')
    print('Syntax: "CGMmassphases_redshift.py cool_warm"')
    quit()
else:
    if (str(sys.argv[1]) == 'cool'):
        T_min = 10**4
        T_max = 10**4.5
    elif (str(sys.argv[1]) == 'cool_warm'):
        T_min = 10**4.5
        T_max = 10**5
    elif (str(sys.argv[1]) == 'warm'):
        T_min = 10**5
        T_max = 10**6
    elif (str(sys.argv[1]) == 'hot'):
        T_min = 10**6
        T_max = 10**7

    else :
        print('Not a valid option. Current options: cool (10^4 - 10^4.5), cool/warm (10^4.5 - 10^5), warm (10^5-10^6), hot (10^6-10^7)')
        print('Syntax: "CGMmassphases_redshift.py cool_warm"')
        quit()


timesteps_P0 = ['0136','0186','0223','0273','0345','0384','0454','0635','0768','0972','1152','1536','1739','1920','2304','2554','2688','3072','3195','3456','3840','4096']
timesteps_GM1 = ['0128','0136','0186','0192','0256','0273','0320','0384','0448','0454','0512','0576','0640','0704','0768','0832','0896','0960','0972','1024','1088','1152','1216','1280','1344','1408','1472','1536','1600','1664','1728','1739','1792','1856','1920','1984','2048','2112','2176','2240','2304','2368','2432','2496','2554','2560','2624','2688','2752','2816','2880','2944','3008','3072','3136','3200','3264','3328','3392','3456','3520','3584','3648','3712','3776','3840','3904','3968','4032',
'4096']
timesteps_GM456 = ['0128','0136','0186','0223','0256','0273','0345','0384','0454','0512','0635','0640','0768','0896','0972','1024','1152','1280','1408','1536','1664','1739','1792','1920','2048','2176','2304','2432','2554','2560','2688','2816','2944','3072','3195','3200','3328','3456','3584','3712','3840','3968','4096']
timesteps = [timesteps_P0,timesteps_GM1,timesteps_GM456,timesteps_GM456,timesteps_GM456,timesteps_GM456]

sims = ['/nobackupp8/fgoverna/pioneer50h243.1536g1bwK1BH/pioneer50h243.1536gst1bwK1BH.00','/nobackupp8/fgoverna/pioneer50h243GM1.1536gs1bwK1BH/pioneer50h243GM1.1536gst1bwK1BH.00','/nobackupp8/fgoverna/pioneer50h243GM4.1536gst1bwK1BH/pioneer50h243GM4.1536gst1bwK1BH.00','/nobackup/nnsanche/pioneer50h243GM5.1536gst1bwK1BH/pioneer50h243GM5.1536gst1bwK1BH.00','/nobackupp8/fgoverna/pioneer50h243GM6.1536gst1bwK1BH/pioneer50h243GM6.1536gst1bwK1BH.00','/nobackup/nnsanche/pioneer50h243GM7.1536gst1bwK1BH/pioneer50h243GM7.1536gst1bwK1BH.00']
names  = ['P0','GM1','GM4','GM5','GM6','GM7']
colors = ['DodgerBlue','SteelBlue','FireBrick','IndianRed','Salmon','Orange']

j=1
redshift = []
time     = []
phaseCGM_mass   = []
phaseCGM_metals = []
for i in range(len(timesteps[j])):
    print(sims[j])
    sim = pynbody.load(str(sims[j])+str(timesteps[j][i]))
    print('simulations at z = ','%.2f' % sim.properties['z'] )

    sim.properties
    sim.properties['time'].in_units('Gyr')
    time.append(sim.properties['time'].in_units('Gyr'))
    redshift.append((1/sim.properties['a'])-1)
    print('time:', sim.properties['time'].in_units('Gyr'), 'redshift',redshift)

    sim.loadable_keys()
    sim.physical_units()
    h = sim.halos()
    h1 = h[1]
    pynbody.analysis.angmom.faceon(h1)

    # Want to isolate CGM  
    # Isolate and remove disk stars within radius 0-10 kpc & vertically 4 kpc 
    r_max = 10  # kpc
    z_max = 4   # kpc
    
    Rg_d = ((h1.g['x'].in_units('kpc'))**2. + (h1.g['y'].in_units('kpc'))**2.)**(0.5)
    disk_gas_xymax =  (Rg_d < r_max)
    disk_gas_zmax  = (h1.g['z'].in_units('kpc') < z_max) & (h1.g['z'].in_units('kpc') > -z_max)
    
    disk_gas_mask = disk_gas_xymax & disk_gas_zmax
    disk_gas = h1.g[disk_gas_xymax & disk_gas_zmax]
    CGM_gas  = h1.g[~disk_gas_mask]
    
    phase_stuff = (CGM_gas['temp'] <= T_max) & (CGM_gas['temp'] >= T_min)
    phase_gas = CGM_gas[phase_stuff]
    
    total_phase_mass = np.sum(phase_gas['mass'])
    print('Total mass of gas between '+str(T_min)+' - '+str(T_max)+' K:',total_phase_mass)
    phaseCGM_mass.append(total_phase_mass)

    mean_phase_metals = np.mean(phase_gas['metals'])
    print('Mean metal fraction of gas bw '+str(T_min)+' - '+str(T_max)+' K:',mean_phase_metals)
    phaseCGM_metals.append(mean_phase_metals)

np.savetxt(names[j]+'_redshifts.txt',redshift)
np.savetxt(names[j]+'_time_Gyr.txt',time)
np.savetxt(names[j]+'_phaseCGM_mass_'+str(sys.argv[1])+'.txt',phaseCGM_mass)
np.savetxt(names[j]+'_phaseCGM_metals_'+str(sys.argv[1])+'.txt',phaseCGM_metals)
